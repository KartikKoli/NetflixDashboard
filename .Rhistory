source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
data<-read.csv("https://raw.githubusercontent.com/geanders/RProgrammingForResearch/master/data/daily_show_guests.csv")
data<-read.csv("https://raw.githubusercontent.com/geanders/RProgrammingForResearch/master/data/daily_show_guests.csv")
source("~/.active-rstudio-document")
str(Data)
head(Data)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
str(d)
head(d)
source("~/.active-rstudio-document")
head(d,10)
getwd()
colnames(d)
newcolnames<-c("year","job","date","category","guest_name")
colnames(d)<-newcolnames
colnames(d)
d[,c('year','date','guest_name')]
subset(d,job=="actor" & guest_name=="David Alan Grier")
d[order(as.Date(d$date,format="%m/%d/%Y"))]
d[order(as.Date(d$date,format="%m/%d/%Y")),]
d[,-1]
d[,c(-1,-5)]
cbind(d,experience)
cbind(d,experience=0)
cbind(d,experience="NULL")
d[1:10]
d[1:10,]
d$experience<-5
d
cbind(d,experience="NULL")
subset(d,select=-c("experience"))
subset(d,select=-c(experience)
)
cbind(d,experience="NULL")
ls()
source("E:/Kartik/R programs/DS/A4(1).R")
source("E:/Kartik/R programs/DS/A4(1).R")
source("E:/Kartik/R programs/DS/A5.R")
source("E:/Kartik/R programs/DS/A5.R")
source("E:/Kartik/R programs/DS/A5.R")
source("E:/Kartik/R programs/DS/A5.R")
#1
d<-read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/daily-show-guests/daily_show_guests.csv")
d[1:10,]
head(d,10)
#2
colnames(d)
newcolnames<-c("year","job","date","category","guest_name")
colnames(d)<-newcolnames
colnames(d)
#3
d[,c('year','date','guest_name')]
#4
d[,-1]
#5
subset(d,job=="actor" & guest_name=="David Alan Grier")
#6
d[order(as.Date(d$date,format="%m/%d/%Y")),]
#7``
cbind(d,experience="NULL")
source("E:/Kartik/R programs/DS/A5.R")
source("E:/Kartik/R programs/DS/A5.R")
source("E:/Kartik/R programs/DS/A5.R")
#1
d<-read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/daily-show-guests/daily_show_guests.csv")
d[1:10,]
head(d,10)
#2
colnames(d)
newcolnames<-c("year","job","date","category","guest_name")
colnames(d)<-newcolnames
colnames(d)
#3
d[,c('year','date','guest_name')]
#4
d[,-1]
#5
subset(d,job=="actor" & guest_name=="David Alan Grier")
#6
d[order(as.Date(d$date,format="%m/%d/%Y")),]
#7``
cbind(d,experience="NULL")
LETTERS
seq(1,50,length.out=10)
seq.int(1,50,length.out=10)
seq.int(1,50,length=10)
seq.int(0,50,length=10)
seq(1,50,length=10)
source("~/.active-rstudio-document")
format(c(6, 13.14521), scientific = TRUE)
format(23.123456789456, digits = 9)
MyList<-list(title="My First List")
MyList
source("E:/Kartik/R programs/DS/A4(1).R")
source("E:/Kartik/R programs/DS/A4(1).R")
MyList<-list(title="My First List")
a<-c(12,14,16,20)
m<-matrix(1:10,nrow = 5,ncol = 2)
score=c('First','Second','Third')
criteria<-list(a,m,score)
MyList
criteria
a
summary(DF)
A=c(1,2,3,4,5)
length(A)
rep(c(5,12,13,20),2)
rep(c(5,12,13,20),each=2)
source("E:/Kartik/R programs/DS/A4.R")
levels(iris$Species)
source("E:/Kartik/R programs/DS/A4.R")
data(mtcars)
mtcars
mtcars["Honda",]
plot(rexp(1:1000,lam))
source("E:/Kartik/R programs/Prob and Stats/A5/A5Q2.R")
plot(rexp(1:1000,lam))
source("E:/Kartik/R programs/Prob and Stats/A5/A5Q1.R")
class(TRUE)
typeof(TRUE)
class(1+2i)
typeof(1+2i)
class("abc")
typeof("abc")
a=sample(1:1000,15)
a
typeof(a)
class(a)
b=seq(1,10)
b
class(b)
typeof(b)
c=c(b)
c
class(c)
typeof(c)
d=c(1,2)
class(d)
typeof(d)
class(1)
class(1L)
str(a)
e=c(1,2,3,4,5)
f=c(sample(letters,5))
e
f
g=data.frame(e,f)
g
g=data.frame(e,f,row.names = F)
g
str(g)
typeof(g)
class(g)
typeof(1)
class(1)
class(1L)
typeof(1L)
k=list(1,2,3,'hi')
k
class(k)
typeof(k)
s=c(1,2,3,"hi")
s
class(s)
typeof(s)
a1=c(1,2,3)
a2=c(4,5,6)
a3=c(7,8,9)
ar=array(c(a1,a2,a3),dim=(3,3,2))
ar=array(c(a1,a2,a3),dim=c(3,3,2))
ar
class(ar)
typeof(ar)
mat=matrix(c(1:9),nrow = 3,ncol = 3)
mat
class(mat)
typeof(mat)
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
gx[1]
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q2.R")
install.packages("pracma")
library(pracma)
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
a
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
b
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
b
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6/A6Q1.R")
library(pracma)
source("E:/Kartik/R programs/Prob and Stats/A6/A6Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A6/A6Q2.R")
#1
n <- 100
df <- n - 1
print("working on rt")
kp<-rt(n,df)
print(kp)
hist(kp)
#1
n <- 100
df <- n - 1
kp<-rt(n,df)
print(kp)
hist(kp)
source("E:/Kartik/R programs/Prob and Stats/A7/A7Q1.R")
source("E:/Kartik/R programs/Prob and Stats/A7/A7Q2.R")
source("E:/Kartik/R programs/Prob and Stats/A7/A7Q3.R")
source("E:/Kartik/R programs/Prob and Stats/A7/A7Q3.R")
print(x)
print(df)
dt(x,df[1])
dt(x,df[2])
dt(x,df[3])
dt(x,df[4])
A<-qf(.95, df1=10, df2=20)
print(A)
pf(1.5,df1= 10,df2= 20,lower.tail = TRUE)
pf(1.5,df1= 10,df2= 20,lower.tail = FALSE)
qf(0.25,df1= 10,df2= 20,lower.tail = TRUE)
qf(0.5,df1= 10,df2= 20,lower.tail = TRUE)
qf(0.75,df1= 10,df2= 20,lower.tail = TRUE)
qf(0.99,df1= 10,df2= 20,lower.tail = TRUE)
rf(100,df1=10,df2=20)
hist(rf(100,df1=10,df2=20))
# Assignment 8
# a) importing the dataset
data <- read.csv(file.choose())
# b) validating the import
print(dim(data))
print(data[seq(10),1])
# c) population mean and plotting a histogram
# m <- sum(data$Wall.Thickness)/dim(data)[1]
m <- mean(data$Wall.Thickness)
m
hist(data$Wall.Thickness , xlab = "Wall Thickness" , ylab = "Frequency")
# d) marking the mean in the plot
abline(v=m , col = "Red")
# data is not in bell shape, hence it is not normally distributed
# a) sample sizes of 10 -> calculating means of each and then plotting the means
drawHistOfMeans = function(samplesize){
i <- 1
means <- c()
while (i<=9000) {
x <- c(data[seq(i,i+samplesize-1) , 1])
means <- c(means , mean(x))
i <- i+samplesize
}
meanofmeans <- mean(means)
meanofmeans
hist(means)
abline(v=meanofmeans , col="Red")
}
drawHistOfMeans(10)
# curve is bell shaped but not normally distributed becoz max value does not lie
# on mean
# b) sample size 50
drawHistOfMeans(50)
# b) sample size 500
drawHistOfMeans(500)
# b) sample size 9000
drawHistOfMeans(9000)
data(iris)
iris
head(iris,4)
x<-c(0,1,2,3,4)
px<-c(0.41,0.37,0.16,0.05,0.01)
weighted.mean(x,px)
sum(weighted.mean(x,px))
x/*/px
x%*%px
#q1
f<-function(x,y){
(x+y)/2;
}
g<-function(x,y){
xy/2;
}
m<-matrix(f(0,0:2),f(1,0:2),f(2,0:2),nrow=3,ncol=3,byrow=TRUE);
m
m1<-matrix(g(0,0:2),g(1,0:2),g(2,0:2),nrow=3,ncol=3,byrow=TRUE);
m<-matrix(c(f(0,0:2),f(1,0:2),f(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m
m1<-matrix(c(g(0,0:2),g(1,0:2),g(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m1<-matrix(c(g(0,0:2),g(1,0:2),g(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
#q1
f<-function(x,y){
(x+y)/2;
}
g<-function(x,y){
(x*y)/2;
}
m<-matrix(c(f(0,0:2),f(1,0:2),f(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m
m1<-matrix(c(g(0,0:2),g(1,0:2),g(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m1
h<-function(x,y){
h(x,y)<-f(x,y)*g(x,y)
}
m2<-matrix(c(h(0,0:2),h(1,0:2),h(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m2<-matrix(c(h(0,0:2),h(1,0:2),h(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
h<-m*m1
h
#q2
pnorm(500,mean=527,sd=112,lower.tail=FALSE)
#q3
q<-seq(-6,6,length=100)
#q3
x<-seq(-6,6,length=100)
q<-c(1,3,5)
color<-c("green","red","black")
a<-dt(x=x,df=q[1])
b<-dt(x=x,df=q[2])
c<-dt(x=x,df=q[3])
#q3
x<-seq(-6,6,length=100)
q<-c(1,3,5)
color<-c("green","red","black")
a<-dt(x=x,df=q[1])
b<-dt(x=x,df=q[2])
c<-dt(x=x,df=q[3])
plot(x,dt(x,q[3]),type="1",xlab="t distribution",ylab="degree of freedom",
main="comparison of probability density function",col=color[3])
plot(x,dt(x,q[3]),type="l",xlab="t distribution",ylab="degree of freedom",
main="comparison of probability density function",col=color[3])
for(i in 1:2){
lines(x,dt(x,q[i]),type="1",col=color[i])
}
lines(x,dt(x,q[i]),type="l",col=color[i])
#q4
data("mtcars")
head("mtcars")
head(mtcars)
str(mtcars)
range(mtcars$mpg)
quantile(mtcars$mpg,c(0.50,0.75))
quartile=quantile(mtcars$mpg,c(0.75))-quantile(mtcars$mpg,c(0.50))
quartile
mean(mtcars$hp)
sd(mtcars$hp)
#q2
pnorm(500,mean=527,sd=112,lower.tail=FALSE)
#q3
x<-seq(-6,6,length=100)
#q3
x<-seq(-6,6,length=100)
x
q<-c(1,3,5)
color<-c("green","red","black")
a<-dt(x=x,df=q[1])
b<-dt(x=x,df=q[2])
c<-dt(x=x,df=q[3])
#q3
x<-seq(-6,6,length=100)
x
q<-c(1,3,5)
color<-c("green","red","black")
a<-dt(x=x,df=q[1])
a
b<-dt(x=x,df=q[2])
b
c<-dt(x=x,df=q[3])
c
plot(x,dt(x,q[3]),type="l",xlab="t distribution",ylab="degree of freedom",
main="comparison of probability density function",col=color[3])
for(i in 1:2){
lines(x,dt(x,q[i]),type="l",col=color[i])
}
#q4
data("mtcars")
head(mtcars)
str(mtcars)
range(mtcars$mpg)
quantile(mtcars$mpg,c(0.50,0.75))
quartile=quantile(mtcars$mpg,c(0.75))-quantile(mtcars$mpg,c(0.50))
quartile
mean(mtcars$hp)
sd(mtcars$hp)
#q1
f<-function(x,y){
(x+y)/2;
}
g<-function(x,y){
(x*y)/2;
}
m<-matrix(c(f(0,0:2),f(1,0:2),f(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m
m1<-matrix(c(g(0,0:2),g(1,0:2),g(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m1
h<-m*m1
h
#q1
f<-function(x,y){
(x+y)/2;
}
g<-function(x,y){
(x*y)/2;
}
m<-matrix(c(f(0,0:2),f(1,0:2),f(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m
m1<-matrix(c(g(0,0:2),g(1,0:2),g(2,0:2)),nrow=3,ncol=3,byrow=TRUE);
m1
h<-m*m1
h
#q2
pnorm(500,mean=527,sd=112,lower.tail=FALSE)
#q3
x<-seq(-6,6,length=100)
x
q<-c(1,3,5)
color<-c("green","red","black")
a<-dt(x=x,df=q[1])
a
b<-dt(x=x,df=q[2])
b
c<-dt(x=x,df=q[3])
c
plot(x,dt(x,q[3]),type="l",xlab="t distribution",ylab="degree of freedom",
main="comparison of probability density function",col=color[3])
for(i in 1:2){
lines(x,dt(x,q[i]),type="l",col=color[i])
}
#q4
data("mtcars")
head(mtcars)
str(mtcars)
range(mtcars$mpg)
quantile(mtcars$mpg,c(0.50,0.75))
quartile=quantile(mtcars$mpg,c(0.75))-quantile(mtcars$mpg,c(0.50))
quartile
mean(mtcars$hp)
setwd("E:/Kartik/Assignments/DS/Project")
getwd()
data1<-read.csv("info1.csv")
data1
library(janitor)
data2<-read.csv("info2.csv")
data2
data3<-read.csv("info3")
data3<-read.csv("info3.csv")
data3
data4<-read.csv("info4.csv")
data4
data12<-clean_names(data1)
data13<-remove_empty(data12,which=c("rows","cols"),quiet=FALSE)
install.packages("tidyr")
library(tidyr)
data69<-drop_na(data4)
write.csv(data69,"try.csv")
d<-read.csv("info1.csv",na.strings=c(""))
d1<-d[complete.cases(d),]
setwd("E:/Kartik/Assignments/DS/Project")
getwd()
data1<-read.csv("info1.csv")
cleandata<-function(df){
return(df[complete.cases(df)],)
}
data1<-cleandata(data1)
getwd()
data1<-read.csv("info1.csv")
cleandata<-function(df){
return(df[complete.cases(df)],)
}
data1<-read.csv("info1.csv",na.strings=c(""))
data11<-cleandata(data1)
data1<-read.csv("info1.csv")
data1<-read.csv("info1.csv",na.strings=c(""))
data11<-data1[complete.cases(data1),]
data2<-read.csv("info2.csv",na.strings=c(""))
data21<-data2[complete.cases(data2),]
data3<-read.csv("info3.csv",na.strings=c(""))
data31<-data3[complete.cases(data3),]
data4<-read.csv("info4.csv".nas.strings=c(""))
data4<-read.csv("info4.csv",na.strings=c(""))
data41<-data4[complete.cases(data4),]
data11<-rbind(data11,data21)
data11<-rbind(data11,data31)
data11<-rbind(data11,data41)
write.csv(data11,"netflix.csv")
View(data11)
View(data1)
View(data11)
View(data1)
View(data11)
